unit Unit1;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants,
  System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs,

  IdWebsocketServer, IdHTTPWebsocketClient, superobject, IdSocketIOHandling,
  Vcl.StdCtrls;

type
  TForm1 = class(TForm)
    Button1: TButton;
    LabelConnect: TLabel;
    procedure Button1Click(Sender: TObject);
  private
    { Déclarations privées }
  public
    { Déclarations publiques }
  end;

var
  Form1: TForm1;
  client: TIdHTTPWebsocketClient;

const
  C_CLIENT_EVENT = 'CLIENT_TO_SERVER_EVENT_TEST';
  C_SERVER_EVENT = 'SERVER_TO_CLIENT_EVENT_TEST';

implementation

{$R *.dfm}

procedure ShowMessageInMainthread(const aMsg: string);
begin
  TThread.Synchronize(nil,
    procedure
    begin
      ShowMessage(aMsg);
    end);
end;

procedure TForm1.Button1Click(Sender: TObject);
begin
  client := TIdHTTPWebsocketClient.Create(Self);
  client.Port := 52389;
  client.Host := 'localhost';
  client.SocketIO.OnEvent(C_SERVER_EVENT,
    procedure(const ASocket: ISocketIOContext; const aArgument: TSuperArray;
      const aCallback: ISocketIOCallback)
    begin
      ShowMessageInMainthread('Data PUSHED from server: ' + aArgument
        [0].AsJSon);
      // server wants a response?
      if aCallback <> nil then
        aCallback.SendResponse('thank for the push!');
    end);
  client.Connect;
  client.SocketIO.Emit(C_CLIENT_EVENT, SO(['request', 'some data']),
  // provide callback
    procedure(const ASocket: ISocketIOContext; const aJSON: ISuperObject;
      const aCallback: ISocketIOCallback)
    begin
      // show response (threadsafe)
      ShowMessageInMainthread('RESPONSE: ' + aJSON.AsJSon);
    end);

end;

function GetValue(const AData: String; Key: String): String;
var
  JSON: ISuperObject;
  rowItem: ISuperObject;
  ADataStringStream: TStringStream;
begin
  ADataStringStream := TStringStream.Create(AData);
  JSON := TSuperObject.ParseStream(ADataStringStream, False);

  Result := JSON.AsString;

end;

end.
